# This is an workflow to autmaticly tests the validity of your OAS definitons and the Common Gateway's abillity to provide an API for them

name: Automated Testing

on:
  pull_request:
    branches:
      - master
      - staging
      - development
      - acceptance

  push:
    branches:
      - master
      - staging
      - development
      - acceptance
      - 'feature/**'


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Prepare voor docker test
#      - name: Create vendor folder
#        run: |
#          mkdir api/vendor
#          chmod +777 api/vendor
#          chmod +777 -R api/public
#      - name: Build the Docker image
#        run: docker compose build -f docker-compose-cli.yml
      - name: Build and Run the docker image
        run: docker compose -f docker-compose-cli.yml up -d --build
      - name: Taking some sleep (for containers to come up)
        run: sleep 20
      - name: Check if all containers are running
        run: docker ps
      - name: Dumping the logs
        run: docker-compose logs
      - name: Download wordpress
        run: docker compose -f docker-compose-cli.yml exec wordpress wp core download --locale=nl_NL
      - name: Configure wordpresss
        run: docker compose -f docker-compose-cli.yml exec wordpress wp config create --dbhost=db --dbname=exampledb --dbuser=exampleuser --dbpass=examplepass --locale=nl_NL
      - name: Install wordpresss
        run: docker compose -f docker-compose-cli.yml exec wordpress wp core install --url=example.com --title=Example --admin_user=supervisor --admin_password=strongpassword --admin_email=info@example.com
      - name: Dumping the logs
        run: docker compose logs
#  test:
#    needs: build

    # The type of runner that the job will run on
#    runs-on: ubuntu-latest

    # Let create an artifact for our plugin
#    steps:
#      - uses: actions/checkout@v3
      - name: Run Gryphe to check for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: wordpress
          fail-build: false
          severity-cutoff: critical
          output-format: table
          #output-format: json
          #output-file: ${{ github.workspace }}/security.json
      #      - name: Run Snyk to check for vulnerabilities
      #        uses: snyk/actions/node@master
      #        env:
      #          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #        with:
      #          command: monitor
      #          continue-on-error: true
      - name: Run Trivy to check for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: wordpress
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: List al the plugins
        run: docker compose -f docker-compose-cli.yml exec wordpress wp plugin list
      - name: Activate the plugin
        run: docker compose -f docker-compose-cli.yml exec wordpress wp plugin activate OpenPub
      - name: Run PHPUnit tests
        uses: php-actions/phpunit@v3
        with:
          configuration: plugins/OpenPub/phpunit.xml.dit
          memory_limit: 256M
      - name: Run Postman Tests
        uses: matt-ball/newman-action@master
        with:
          collection: postman_collection.json
          #environment: postman_environment.json
      - name: Chores
        if: (success() || failure())
        run: docker compose -f docker-compose-cli.yml down

  publish:
    # Lets make sure we only publish afther an succeful build
    needs: test

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Let create an artifact for our plugin
    steps:
      - uses: actions/checkout@v3
      - uses: vimtor/action-zip@v1
        with:
          files: plugins/OpenPub
          dest: OpenPub.zip
      - uses: actions/upload-artifact@v1
        with:
          name: OpenPub
          path: ${{ github.workspace }}/OpenPub.zip